name: CI

on:
  push:
    branches: [ backn, main, master ]
  pull_request:
    branches: [ backn, main, master ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: odoo_hack
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/odoo_hack
      SECRET_KEY: testsecret
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Alembic upgrade (baseline)
        working-directory: backend
        env:
          DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/odoo_hack
        run: |
          alembic -c alembic.ini upgrade head || (echo 'Alembic upgrade failed' && exit 1)

      - name: Lint (basic import check)
        working-directory: backend
        run: |
          python -c "import fastapi, sqlalchemy, pydantic, pytest; print('All core modules present')"

      - name: Run tests with coverage
        working-directory: backend
        run: |
          pytest -q

      - name: Coverage XML
        if: success()
        working-directory: backend
        run: |
          pytest --cov=models --cov=crud --cov=api --cov=services --cov-report=xml:coverage.xml --cov-fail-under=80 || exit 1

      - name: Upload coverage artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
            name: coverage-report
            path: backend/coverage.xml

      - name: Security Scan (pip-audit)
        if: success()
        working-directory: backend
        run: |
          pip install pip-audit
          pip-audit --strict || (echo 'Vulnerabilities found' && exit 1)

      - name: Static Analysis (Semgrep)
        if: success()
        run: |
          pip install semgrep
          semgrep ci --config p/fastapi --error || (echo 'Semgrep findings (blocking)' && exit 1)
